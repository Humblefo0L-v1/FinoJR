{"version":3,"sources":["pages/ComparePage/Graph1.js","pages/ComparePage/Invsnon.js","pages/ComparePage/LumpSum.js","pages/ComparePage/SIP.js","pages/ComparePage/Compare.js","App.js","index.js"],"names":["Graph1","invested_graph","profit","componded_graph","loss","period","length","data","year","obj","name","toString","invested","componded","amt","push","Card","class","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","initialState","investment","expected_return","Invsnon","useState","formData","setFormData","investedTotal","setinvestedTotal","not_investedTotal","setnotinvestedTotal","setprofitGraph","setlossGraph","variant","CardContent","Typography","TextField","required","id","label","onChange","e","target","value","Button","fullWidth","color","onClick","investedGraph","not_investedGraph","one_year_return","Math","round","inflation","Box","LumpSum","setInvestment","total","setTotal","compounded","SIP","investedData","setinvestedData","compondedData","setcompoundedData","investmentAmount","setInvestmentAmount","settotal","monthly_investment","investment_amount","expected_graph","month","Compare","to","path","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30306b87.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nfunction Graph1({ profit, loss }) {\n  const invested_graph = profit;\n  const componded_graph = loss;\n  var period = componded_graph.length;\n  const data = [{}];\n\n  if (period) {\n    for (var year = 1; year <= period; year++) {\n      var obj = {\n        name: (2021 + year).toString(),\n        invested: invested_graph[year],\n        componded: componded_graph[year],\n        amt: year,\n      };\n      data.push(obj);\n    }\n  } else {\n    period = invested_graph.length;\n    for (year = 1; year <= period; year++) {\n      obj = {\n        name: (2021 + year).toString(),\n        invested: invested_graph[year],\n        componded: componded_graph[year],\n        amt: year,\n      };\n      data.push(obj);\n    }\n  }\n\n  return (\n    <Card class=\"graph\">\n      <div>\n        <LineChart\n          width={730}\n          height={450}\n          data={data}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"invested\" stroke=\"#82ca9d\" />\n          <Line type=\"monotone\" dataKey=\"componded\" stroke=\"#fc3903\" />\n        </LineChart>\n      </div>\n    </Card>\n  );\n}\n\nexport default Graph1;\n","import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Graph1 from \"./Graph1\";\n\nconst initialState = {\n  investment: \"\",\n  period: \"\",\n  expected_return: \"\",\n};\n\nexport const chartColors = [\"#e34522\", \"#14b514\"];\n\nfunction Invsnon() {\n  const [formData, setFormData] = useState(initialState);\n  const [investedTotal, setinvestedTotal] = useState(0);\n  const [not_investedTotal, setnotinvestedTotal] = useState(0);\n  const [profit, setprofitGraph] = useState([]);\n  const [loss, setlossGraph] = useState([]);\n\n  const calculateTotal = () => {\n    var investment = +formData.investment;\n    var period = +formData.period;\n    var expected_return = +formData.expected_return;\n    var profit = investment;\n    var loss = investment;\n    var investedGraph = [];\n    var not_investedGraph = [];\n\n    for (var year = 1; year <= period; year++) {\n      var one_year_return = Math.round((profit / 100) * expected_return);\n      profit = Math.round(profit + one_year_return);\n      var inflation = Math.round((loss / 100) * 6);\n      loss = Math.round(loss - inflation);\n      investedGraph.push(profit);\n      not_investedGraph.push(loss);\n    }\n    setinvestedTotal(investedGraph[investedGraph.length - 1]);\n    setnotinvestedTotal(not_investedGraph[not_investedGraph.length - 1]);\n    setprofitGraph(investedGraph);\n    setlossGraph(not_investedGraph);\n  };\n\n  return (\n    <div>\n      <Card class=\"container\" variant=\"outlined\">\n        <CardContent>\n          <Typography>\n            <h1>If you invest Rs x vs If you not invest Rs x</h1>\n          </Typography>\n          <div class=\"inputFields\">\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Invested Amount (Rs)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, investment: e.target.value })\n              }\n            />\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Investment period (years)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, period: e.target.value })\n              }\n            />\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Expected Return (%)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, expected_return: e.target.value })\n              }\n            />\n          </div>\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={calculateTotal}\n          >\n            Calculate\n          </Button>\n          <Box>\n            Invested Amount Today: {investedTotal} <br />\n            Not Invested Amount: ₹ {not_investedTotal}\n            <br />\n            (Note: Assuming 6% inflation rate)\n          </Box>\n        </CardContent>\n      </Card>\n      <Graph1 profit={profit} loss={loss} />\n    </div>\n  );\n}\n\nexport default Invsnon;\n","import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Graph1 from \"./Graph1\";\n\nconst initialState = {\n  investment: \"\",\n  period: \"\",\n  expected_return: \"\",\n};\n\nexport const chartColors = [\"#e34522\", \"#14b514\"];\n\nfunction LumpSum() {\n  const [formData, setFormData] = useState(initialState);\n  const [investment, setInvestment] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [profit, setprofitGraph] = useState([]);\n  const [loss, setlossGraph] = useState([]);\n\n  const calculateTotal = () => {\n    var investment = +formData.investment;\n    var period = +formData.period;\n    var expected_return = +formData.expected_return;\n    var total = investment;\n    var compounded = [];\n\n    for (var year = 1; year <= period; year++) {\n      var one_year_return = Math.round((total / 100) * expected_return);\n      total = total + one_year_return;\n      compounded.push(total);\n    }\n    setprofitGraph(compounded);\n    setlossGraph([]);\n    setTotal(total);\n    setInvestment(investment);\n  };\n\n  return (\n    <div>\n      <Card class=\"container\" variant=\"outlined\">\n        <CardContent>\n          <Typography>\n            <h1>If you invest Rs x for period y years</h1>\n          </Typography>\n          <div class=\"inputFields\">\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Invested Amount (Rs)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, investment: e.target.value })\n              }\n            />\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Investment period (years)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, period: e.target.value })\n              }\n            />\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Expected Return (%)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, expected_return: e.target.value })\n              }\n            />\n          </div>\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={calculateTotal}\n          >\n            Calculate\n          </Button>\n          <Box>\n            Invested Amount: ₹{investment} <br />\n            Total Amount: ₹ {total} <br />\n            Wealth Gain: ₹ {total - investment}\n            <br />\n          </Box>\n        </CardContent>\n      </Card>\n      <Graph1 profit={profit} loss={loss} />\n    </div>\n  );\n}\n\nexport default LumpSum;\n","import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Graph1 from \"./Graph1\";\n\nconst initialState = {\n  investment: \"\",\n  period: \"\",\n  expected_return: \"\",\n};\n\nfunction SIP() {\n  const [formData, setFormData] = useState(initialState);\n  const [investedData, setinvestedData] = useState({});\n  const [compondedData, setcompoundedData] = useState({});\n  const [investmentAmount, setInvestmentAmount] = useState(0);\n  const [total, settotal] = useState(0);\n\n  const calculateTotal = () => {\n    var monthly_investment = +formData.investment;\n    var period = +formData.period;\n    var expected_return = +formData.expected_return;\n    var investment_amount = 0;\n    var total = 0;\n    var invested_graph = [];\n    var expected_graph = [];\n\n    for (var year = 1; year <= period; year++) {\n      for (var month = 1; month <= 12; month++) {\n        total = total + monthly_investment;\n        investment_amount = investment_amount + monthly_investment;\n      }\n      var one_year_return = Math.round((total / 100) * expected_return);\n      total = Math.round(total + one_year_return);\n      invested_graph.push(investment_amount);\n      expected_graph.push(total);\n    }\n    investment_amount = Math.round(investment_amount);\n    total = Math.round(total);\n    setinvestedData(invested_graph);\n    setcompoundedData(expected_graph);\n    setInvestmentAmount(investment_amount);\n    settotal(total);\n  };\n\n  return (\n    <div>\n      <Card class=\"container\" variant=\"outlined\">\n        <CardContent>\n          <Typography>\n            <h1>If you invest Rs x every month for period y years</h1>\n          </Typography>\n          <div class=\"inputFields\">\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Invested Amount (Rs)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, investment: e.target.value })\n              }\n            />\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Investment period (years)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, period: e.target.value })\n              }\n            />\n            <TextField\n              required\n              id=\"outlined-basic\"\n              label=\"Expected Return (%)\"\n              variant=\"outlined\"\n              onChange={(e) =>\n                setFormData({ ...formData, expected_return: e.target.value })\n              }\n            />\n          </div>\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={calculateTotal}\n          >\n            Calculate\n          </Button>\n          <Box>\n            Invested Amount: ₹{investmentAmount} <br />\n            Total Amount: ₹ {total} <br />\n            Wealth Gain: ₹ {total - investmentAmount}\n            <br />\n          </Box>\n        </CardContent>\n      </Card>\n      <Graph1 profit={investedData} loss={compondedData} />\n    </div>\n  );\n}\n\nexport default SIP;\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./Compare.css\";\nimport InvestedVsNoninvested from \"./Invsnon\";\nimport LumpSum from \"./LumpSum\";\nimport SIP from \"./SIP\";\n\nfunction Compare() {\n  return (\n    <Router>\n      <div>\n        <div class=\"headers\">\n          <Button variant=\"contained\">\n            <Link to=\"/diff\">Invested VS Not Invested</Link>\n          </Button>\n          <Button variant=\"contained\">\n            <Link to=\"/monthly\">Invested Monthly</Link>\n          </Button>\n          <Button variant=\"contained\">\n            <Link to=\"/lumpsum\">Invested Lump Sum ammount</Link>\n          </Button>\n        </div>\n        <Switch>\n          <Route path=\"/diff\">\n            <InvestedVsNoninvested />\n          </Route>\n          <Route path=\"/monthly\">\n            <SIP />\n          </Route>\n          <Route path=\"/lumpsum\">\n            <LumpSum />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default Compare;\n","import \"./App.css\";\nimport Compare from \"./pages/ComparePage/Compare\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Compare />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}